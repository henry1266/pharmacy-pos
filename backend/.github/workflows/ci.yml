name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'shared/**'
      - '.github/workflows/ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - 'shared/**'

env:
  NODE_VERSION: '18.x'
  MONGODB_VERSION: '6.0'

jobs:
  # 代碼品質檢查
  lint-and-format:
    name: 代碼品質檢查
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4

    - name: 設置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安裝 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 安裝依賴
      run: |
        cd backend
        pnpm install --frozen-lockfile

    - name: TypeScript 類型檢查
      run: |
        cd backend
        pnpm run type-check

    - name: ESLint 檢查
      run: |
        cd backend
        pnpm run lint
      continue-on-error: true

    - name: 代碼格式檢查
      run: |
        cd backend
        pnpm run format:check
      continue-on-error: true

  # 單元測試和整合測試
  test:
    name: 測試套件
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    strategy:
      matrix:
        node-version: ['16.x', '18.x', '20.x']
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: testuser
          MONGO_INITDB_ROOT_PASSWORD: testpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4

    - name: 設置 Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: 安裝 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 安裝依賴
      run: |
        cd backend
        pnpm install --frozen-lockfile

    - name: 等待服務啟動
      run: |
        timeout 60 bash -c 'until nc -z localhost 27017; do sleep 1; done'
        timeout 60 bash -c 'until nc -z localhost 6379; do sleep 1; done'

    - name: 運行單元測試
      run: |
        cd backend
        pnpm test -- --coverage --ci --watchAll=false
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/test?authSource=admin
        REDIS_URL: redis://localhost:6379

    - name: 上傳測試覆蓋率報告
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false

    - name: 運行整合測試
      run: |
        cd backend
        pnpm run test:integration
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://testuser:testpass@localhost:27017/integration_test?authSource=admin
        REDIS_URL: redis://localhost:6379
      continue-on-error: true

  # 安全性掃描
  security:
    name: 安全性掃描
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4

    - name: 設置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安裝 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 安裝依賴
      run: |
        cd backend
        pnpm install --frozen-lockfile

    - name: 運行安全性審計
      run: |
        cd backend
        pnpm audit --audit-level moderate
      continue-on-error: true

    - name: 檢查已知漏洞
      run: |
        cd backend
        npx audit-ci --moderate
      continue-on-error: true

  # 性能測試
  performance:
    name: 性能測試
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      mongodb:
        image: mongo:${{ env.MONGODB_VERSION }}
        env:
          MONGO_INITDB_ROOT_USERNAME: perfuser
          MONGO_INITDB_ROOT_PASSWORD: perfpass
        ports:
          - 27017:27017

    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4

    - name: 設置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安裝 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 安裝依賴
      run: |
        cd backend
        pnpm install --frozen-lockfile

    - name: 建立測試資料
      run: |
        cd backend
        pnpm run seed:test-data
      env:
        MONGODB_URI: mongodb://perfuser:perfpass@localhost:27017/perf_test?authSource=admin

    - name: 運行性能測試
      run: |
        cd backend
        pnpm run test:performance
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://perfuser:perfpass@localhost:27017/perf_test?authSource=admin

    - name: 上傳性能報告
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: backend/performance-report.html

  # 建構和部署
  build-and-deploy:
    name: 建構和部署
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    steps:
    - name: Checkout 代碼
      uses: actions/checkout@v4

    - name: 設置 Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 安裝 pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: 安裝依賴
      run: |
        cd backend
        pnpm install --frozen-lockfile

    - name: 建構應用
      run: |
        cd backend
        pnpm run build

    - name: 建構 Docker 映像
      run: |
        cd backend
        docker build -t pharmacy-pos-backend:${{ github.sha }} .
        docker tag pharmacy-pos-backend:${{ github.sha }} pharmacy-pos-backend:latest

    - name: 登入 Docker Registry
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: 推送 Docker 映像
      if: github.ref == 'refs/heads/main'
      run: |
        docker push ${{ secrets.DOCKER_REGISTRY }}/pharmacy-pos-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_REGISTRY }}/pharmacy-pos-backend:latest

    - name: 部署到測試環境
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "部署到測試環境"
        # 這裡添加部署到測試環境的腳本

    - name: 部署到生產環境
      if: github.ref == 'refs/heads/main'
      run: |
        echo "部署到生產環境"
        # 這裡添加部署到生產環境的腳本

  # 通知
  notify:
    name: 通知
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: 通知成功
      if: needs.build-and-deploy.result == 'success'
      run: |
        echo "✅ CI/CD 流程成功完成"
        # 這裡可以添加 Slack、Teams 或其他通知服務

    - name: 通知失敗
      if: needs.build-and-deploy.result == 'failure'
      run: |
        echo "❌ CI/CD 流程失敗"
        # 這裡可以添加失敗通知邏輯

  # 清理
  cleanup:
    name: 清理資源
    runs-on: ubuntu-latest
    needs: [build-and-deploy]
    if: always()
    
    steps:
    - name: 清理 Docker 映像
      run: |
        docker system prune -f
        docker image prune -a -f

    - name: 清理工作空間
      run: |
        rm -rf ${{ github.workspace }}/*